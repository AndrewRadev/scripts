#! /bin/sh

# This script checks git-modified files with Rubocop and reports the results.
# It's intended to be used in a git pre-commit hook (.git/hooks/pre-commit)
# like so:
#
#   git rubocop
#
#   if [ $? -ne 0 ]; then
#    echo "Code must be clean before commiting"
#    exit 1
#   fi
#
# It's not perfect, for instance if you patch-add only some parts of a file,
# the entire file is going to be checked. But it's good enough for me.

# Check if we're in a git repo
git status > /dev/null || exit 1

# Collect files to check:
# - only staged ones, if there are any
# - all modified ones
#
files=$(git diff --name-only --cached)
if [ -z "$files" ]; then
  echo "No staged files, checking all modified"
  files=$(git diff --name-only)
fi

# ls 2> /dev/null -> filter out removed files
files=$(echo $files | ls $files 2> /dev/null | grep '\.rb$' | grep -v 'db/schema.rb')
if [ -z "$files" ]; then
  echo "No changed ruby files in git (other than maybe db/schema.rb)"
  exit 0
fi

echo "Checking files:"
for file in $files; do
  echo "- $file"
done

echo $files | xargs bundle exec rubocop
